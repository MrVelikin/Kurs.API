// <auto-generated />
using System;
using Kurss.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kurss.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Kurss.Domain.Documents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Docs");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Documents");
                });

            modelBuilder.Entity("Kurss.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonalDataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PasId");

                    b.HasIndex("PersonalDataId");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Kurss.Domain.PersonalData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("DateOfBirth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PersonalDatas");
                });

            modelBuilder.Entity("Kurss.Domain.Address", b =>
                {
                    b.HasBaseType("Kurss.Domain.Documents");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Flat")
                        .HasColumnType("int");

                    b.Property<int>("House")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Address");
                });

            modelBuilder.Entity("Kurss.Domain.Administrator", b =>
                {
                    b.HasBaseType("Kurss.Domain.Person");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("Kurss.Domain.Pasport", b =>
                {
                    b.HasBaseType("Kurss.Domain.Documents");

                    b.Property<int>("EndDate")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WhoGave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("PersonId");

                    b.HasDiscriminator().HasValue("Pasport");
                });

            modelBuilder.Entity("Kurss.Domain.Sertificate", b =>
                {
                    b.HasBaseType("Kurss.Domain.Documents");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Sertificate_PersonId");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SertName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("PersonId");

                    b.HasDiscriminator().HasValue("Sertificate");
                });

            modelBuilder.Entity("Kurss.Domain.Person", b =>
                {
                    b.HasOne("Kurss.Domain.Pasport", "Pas")
                        .WithMany()
                        .HasForeignKey("PasId");

                    b.HasOne("Kurss.Domain.PersonalData", "PersonalData")
                        .WithMany()
                        .HasForeignKey("PersonalDataId");

                    b.Navigation("Pas");

                    b.Navigation("PersonalData");
                });

            modelBuilder.Entity("Kurss.Domain.Pasport", b =>
                {
                    b.HasOne("Kurss.Domain.Person", null)
                        .WithMany("Pasports")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("Kurss.Domain.Sertificate", b =>
                {
                    b.HasOne("Kurss.Domain.Person", null)
                        .WithMany("Sertificats")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("Kurss.Domain.Person", b =>
                {
                    b.Navigation("Pasports");

                    b.Navigation("Sertificats");
                });
#pragma warning restore 612, 618
        }
    }
}
